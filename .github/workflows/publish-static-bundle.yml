# This workflow standardizes the release of packages which are hosted on S3 and served behind a Cloudfront CDN.
# There is significant drift in the file structure across these projects, which makes things harder to standardize, hence the number of inputs to this workflow.
name: Publish Static Bundle
on:
  workflow_call:
    inputs:
      stage:
        description: "Stage to deploy to (eg. staging, production)"
        required: true
        type: string
      environment:
        description: "Name of the github environment used to gate deployments. This will be used by the workflow to resolve the correct values for Github Secrets and Vars."
        required: true
        type: string
      run-preflight-checks:
        description: "Flag to enable preflight checks"
        default: true
        type: boolean
      perform-gated-preview-deployment:
        description: "Flag to enable gated preview deployment"
        default: false
        type: boolean
      tag_name:
        description: "The tag to be deployed. Optional. Expected to be given during production releases."
        required: false
        type: string
      package-name:
        description: "The name of the package to be published e.g. @evervault/browser"
        required: true
        type: string
      cloudfront-distribution-id:
        description: "The name of the secret which contains the CloudFront distribution ID to invalidate. This is due to a limitation of Github Actions where you cannot use secrets in the workflow_call inputs."
        required: true
        type: string
      cloudfront-preview-path-invalidation:
        description: "Comma separated list of paths to invalidate in CloudFront for the preview deployment. Only set when the preview deployment is enabled."
        required: false
        type: string
      cloudfront-live-path-invalidation:
        description: "Comma separated list of paths to invalidate in CloudFront for the live deployment. Must be set."
        required: true
        type: string
      asset-subdomain:
        description: "The Evervault subdomain that the asset is hosted under. Only required for packages which perform preflight checks against their hosted asset."
        required: false
        type: string
      s3-bucket-var-name:
        description: "The name of the Github environment variable which contains the S3 bucket name to deploy to. We need to pass the var name to account for the value changing based on the configured environment."
        required: true
        type: string
jobs:
  # Resolve the name of the artifact to be used in the deployment
  get-artifact-name:
    uses: ./.github/workflows/get-artifact-name.yml
    with:
      package-name: ${{ inputs.package-name }}
      environment: ${{ inputs.stage }}
  # For packages which support preflight testing/deployment previews, we deploy the static bundle under a preview namespace and optionally run a preflight test against it.
  # This is to ensure that the preview deployment is working as expected before we promote to production.
  deploy-preview:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    if: ${{ inputs.perform-gated-preview-deployment }}
    name: "[PREVIEW] Deploy ${{ inputs.package-name }} to ${{ inputs.stage }}"
    needs: get-artifact-name
    steps:
      # Sanity check that the preview deployment is for a package that we support. This is to prevent the workflow from running in an undefined state.
      - name: Assert that preview deployment is for a known package
        uses: actions/github-script@v7
        if: ${{ inputs.package-name != '@evervault/ui-components' && inputs.package-name != '@evervault/browser' }}
        with:
          script: |
            core.setFailed("Preview deployment has not been implemented for: ${{ inputs.package-name }}. Continuing would be undefined behaviour. Please implement a preview deployment for this package before proceeding.");
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ inputs.stage == 'production' &&  secrets.PUBLIC_REPO_AWS_ACCESS_KEY_ID || secrets.PUBLIC_REPO_AWS_ACCESS_KEY_ID_STAGING }}
          aws-secret-access-key: ${{ inputs.stage == 'production' &&  secrets.PUBLIC_REPO_AWS_SECRET_ACCESS_KEY || secrets.PUBLIC_REPO_AWS_SECRET_ACCESS_KEY_STAGING }}
          aws-region: "us-east-1"
      - name: Check out code
        uses: actions/checkout@v4
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4.1.8
        with:
          name: ${{ needs.get-artifact-name.outputs.artifact-name }}
          path: dist
      # The file paths that we upload the built assets to are different for each package, so its easier to read through if we just explicitly upload the files to the correct path
      # rather than further bloating the workflow with inputs. 
      #
      # As it stands, we only support preview deployments for @evervault/ui-components and @evervault/browser. New packages with preview support should extend the below impls, and update the assertion above.
      # 
      # ui-components expects its built resources to be uploaded to /assets. These assets are then referenced in the index.html.
      # To support the deployment preview, we upload the assets, but deploy the index.html to the preview path.
      - name: S3 Deploy UI-Components assets to preview
        if: ${{ inputs.package-name == '@evervault/ui-components' }}
        env:
          S3_BUCKET_VAR: ${{ inputs.s3-bucket-var-name }}
        run: |-
          aws s3 cp ./dist/assets s3://${{ vars[env.S3_BUCKET_VAR] }}/assets/ --recursive
          aws s3 cp ./dist/index.html s3://${{ vars[env.S3_BUCKET_VAR] }}/preview/ --recursive
      # @evervault/browser requires its build output to be renamed before upload. Once thats done, we upload the renamed files to the preview path under the top level v2 directory.
      - name: S3 Deploy browser sdk assets to preview
        if: ${{ inputs.package-name == '@evervault/browser' }}
        env:
          S3_BUCKET_VAR: ${{ inputs.s3-bucket-var-name }}
        run: |-
          cp ./dist/evervault-browser.main.umd.cjs ./dist/index.js && cp ./dist/evervault-browser.main.js ./dist/index.es.js
          aws s3 cp ./dist/ s3://${{ vars[env.S3_BUCKET_VAR] }}/v2/preview/ --recursive
      # For Packages which have multiple paths that need to be invalidated, its easier to use the batch invalidation API than it is to programmatically pass the `--paths` flag to the CLI.
      # As a result, we split the list of paths on comma and create the expected payload (ref: https://docs.aws.amazon.com/cli/latest/reference/cloudfront/create-invalidation.html)
      - name: Prepare cloudfront payload
        uses: actions/github-script@v7
        id: prepare-cloudfront-payload
        with:
          script: |
            const paths = ${{ inputs.cloudfront-preview-path-invalidation }}.split(',').map(path => path.trim()).filter(path => path !== '');
            return {
              Paths: {
                Quantity: paths.length,
                Items: paths
              }
            };
        # Use the JSON payload generated in the previous step to perform a batch invalidation against the CloudFront CDN.
      - name: Cloudfront Cache Invalidation
        run: |-
          echo "${{ steps.prepare-cloudfront-payload.outputs.result }}" > invalidation.json
          aws cloudfront create-invalidation --distribution-id ${{ secrets[env.CF_DISTRO_SECRET_NAME] }} --invalidation-batch file://invalidation.json
        env:
          CF_DISTRO_SECRET_NAME: ${{ inputs.cloudfront-distribution-id }}
      - uses: pnpm/action-setup@v4
      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "pnpm"
      - name: Install deps
        run: pnpm install --frozen-lockfile
      - name: Install Playwright Browsers
        run: pnpm exec playwright install --with-deps
      - name: Run preflight checks
        if: ${{ inputs.run-preflight-checks }}
        id: preflight
        env:
          VITE_EV_TEAM_UUID: ${{ secrets.TESTS_TEAM_UUID }}
          VITE_EV_APP_UUID: ${{ secrets.TESTS_APP_UUID }}
          VITE_API_KEY: ${{ secrets.TESTS_DECRYPT_FN_KEY }}
          VITE_EVERVAULT_JS_URL: https://${{ inputs.asset-subdomain }}.evervault.${{ inputs.stage == 'production' && 'com' || 'io' }}${{ inputs.cloudfront-preview-path-invalidation }}
        run: pnpm --filter=@repo/browser-pre-release-tests test-prerelease
      - name: Notify slack of failed release gate run
        uses: donaltuohy/deployment-slack-alert@v1
        if: ${{ failure() && inputs.run-preflight-checks && steps.preflight.outcome == 'failure' }}
        with:
          webhook: ${{ secrets.PRODUCTION_SLACK_WEBHOOK }}
          service_name: ${{ inputs.package-name }} Preflight check failed for ${{ inputs.stage }}
          action: failed
  # The final deployment step is to deploy the static bundle to S3 and invalidate the CloudFront cache.
  # This will move the static bundle to the live path and make it available to clients in either staging or production as configued.
  #
  # The logic for this release process is largely consistent with the preview deployment above.
  deploy:
    runs-on: ubuntu-latest
    needs: [get-artifact-name, deploy-preview]
    # We need to run this step even if the preview deployment is skipped. This is to account for the preview deployment being skipped.
    # If the preview deployment fails, we should not attempt a live deployment.
    if: ${{ always() && !failure() }}
    environment: ${{ inputs.environment }}-deploy
    name: "Deploy ${{ inputs.package-name }} to ${{ inputs.stage }}"
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ inputs.stage == 'production' &&  secrets.PUBLIC_REPO_AWS_ACCESS_KEY_ID || secrets.PUBLIC_REPO_AWS_ACCESS_KEY_ID_STAGING }}
          aws-secret-access-key: ${{ inputs.stage == 'production' &&  secrets.PUBLIC_REPO_AWS_SECRET_ACCESS_KEY || secrets.PUBLIC_REPO_AWS_SECRET_ACCESS_KEY_STAGING }}
          aws-region: "us-east-1"
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4.1.8
        with:
          name: ${{ needs.get-artifact-name.outputs.artifact-name }}
          path: dist
      - name: S3 Deploy @evervault/browser
        if: ${{ inputs.package-name == '@evervault/browser' }}
        env:
          S3_BUCKET_VAR: ${{ inputs.s3-bucket-var-name }}
        run: |-
          cp ./dist/evervault-browser.main.umd.cjs ./dist/index.js && cp ./dist/evervault-browser.main.js ./dist/index.es.js
          aws s3 cp ./dist/ s3://${{ vars[env.S3_BUCKET_VAR] }}/v2/ --recursive
      - name: S3 Deploy @evervault/ui-components
        if: ${{ inputs.package-name == '@evervault/ui-components' }}
        env:
          S3_BUCKET_VAR: ${{ inputs.s3-bucket-var-name }}
        run: aws s3 cp ./dist/index.html s3://${{ vars[env.S3_BUCKET_VAR] }}/
      - name: S3 Deploy @evervault/inputs
        if: ${{ inputs.package-name == '@evervault/inputs' }}
        env:
          S3_BUCKET_VAR: ${{ inputs.s3-bucket-var-name }}
        run: aws s3 cp ./dist s3://${{ vars[env.S3_BUCKET_VAR] }}/v2/ --recursive
      - name: S3 Deploy @evervault/3ds
        if: ${{ inputs.package-name == '@evervault/3ds' }}
        env:
          S3_BUCKET_VAR: ${{ inputs.s3-bucket-var-name }}
        run: aws s3 cp dist s3://${{ vars[env.S3_BUCKET_VAR] }}/ --recursive
      - name: Prepare cloudfront payload
        uses: actions/github-script@v7
        id: prepare-cloudfront-payload
        with:
          script: |
            const paths = ${{ inputs.cloudfront-live-path-invalidation }}.split(',').map(path => path.trim()).filter(path => path !== '');
            return {
              Paths: {
                Quantity: paths.length,
                Items: paths
              }
            };
      - name: Cloudfront Cache Invalidation
        # Prepare a JSON file for the invalidation batch and send it to cloudfront
        run: |- 
          echo "${{ steps.prepare-cloudfront-payload.outputs.result }}" > invalidation.json
          aws cloudfront create-invalidation --distribution-id ${{ secrets[env.CF_DISTRO_SECRET_NAME] }} --invalidation-batch file://invalidation.json
        env:
          CF_DISTRO_SECRET_NAME: ${{ inputs.cloudfront-distribution-id }}
  # If we just created a production release, take the changelog contents for the provided package and put it into the Github Release body.
  create_release:
    name: Create Github Release and Changelog
    runs-on: ubuntu-latest
    needs: deploy
    if: ${{ inputs.stage == 'production' }}
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get package name
        env:
          TAG: ${{ inputs.tag_name }}
        id: parse
        run: |
          if [[ "$TAG" == *"evervault-react-native"* ]]; then
            echo "name=react-native" >> $GITHUB_OUTPUT
          else
            name_part=${TAG##*/}
            echo "name=${name_part%@*}" >> $GITHUB_OUTPUT
          fi
      - uses: softprops/action-gh-release@v2
        with:
          body_path: ${{ github.workspace }}/packages/${{ steps.parse.outputs.name }}/CHANGELOG.md
          tag_name: ${{ inputs.tag_name }}