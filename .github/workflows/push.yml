# Deploy packages to staging enviroments on push to master
name: Main Push Workflow
on:
  push:
    branches:
      - "master"
      - "main"
concurrency: ${{ github.workflow }}-${{ github.ref }}
jobs:
  lint-and-test:
    uses: ./.github/workflows/lint.yml
    with:
      vite-evervault-js-url: "https://js.evervault.io/v2"
      vite-keys-url: "https://api.evervault.io/teams"
      vite-api-url: "https://api.evervault.io"
    secrets: inherit
  e2e-test:
    uses: ./.github/workflows/e2e-test.yml
    with:
      vite-evervault-js-url: "https://js.evervault.com/v2"
      vite-keys-url: "https://keys.evervault.com"
      vite-api-url: "https://api.evervault.com"
      run-code-coverage-checks: false
    secrets: inherit
  get-all-publishable-packages:
    runs-on: ubuntu-latest
    outputs:
      publishable-packages: ${{ steps.get-publishable-packages.outputs.publishable-packages }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "pnpm"
      - name: Install deps
        run: pnpm install --frozen-lockfile
      - name: Get publishable packages
        id: get-publishable-packages
        run: |-
          PUBLISHABLE=$(pnpm m ls --depth=1 --json | jq -cr '[.[] | select(.name|startswith("@evervault")) | select(.private == false) | .name]')
          echo "publishable-packages=$PUBLISHABLE" >> $GITHUB_OUTPUT
  build:
    uses: ./.github/workflows/build.yml
    needs: get-all-publishable-packages
    strategy:
      matrix:
        package-name: ${{ fromJson(needs.get-all-publishable-packages.outputs.publishable-packages) }}
    with:
      vite-evervault-js-url: "https://js.evervault.io/v2"
      vite-keys-url: "https://api.evervault.io/teams"
      vite-api-url: "https://api.evervault.io"
      environment: "staging"
      package-name: ${{ matrix.package-name }}
      upload-artifact: true
    secrets: inherit
  deploy-browser:
    needs: [lint-and-test,e2e-test,build]
    uses: ./.github/workflows/publish-static-bundle.yml
    with:
      stage: "staging"
      package-name: '@evervault/browser'
      preview-environment: 'staging-deploy'
      live-environment: 'browser-staging-deploy'
      run-preflight-checks: false
      perform-gated-preview-deployment: true
      cloudfront-preview-path-invalidation: "/v2/preview/index.js"
      cloudfront-live-path-invalidation: "/v2/index.js"
      asset-subdomain: "js"
      s3-bucket-var-name: 'BROWSER_SDK_S3_BUCKET'
      cloudfront-distribution-id: 'BROWSER_SDK_CLOUDFRONT_DISTRIBUTION_ID'
    secrets: inherit
  deploy-inputs:
    needs: [lint-and-test,e2e-test,build]
    uses: ./.github/workflows/publish-static-bundle.yml
    with:
      stage: "staging"
      package-name: '@evervault/inputs'
      live-environment: 'staging'
      run-preflight-checks: false
      perform-gated-preview-deployment: false
      cloudfront-live-path-invalidation: "/index.html,/bundle.js,/v2/*"
      s3-bucket-var-name: 'INPUTS_S3_BUCKET'
      cloudfront-distribution-id: 'INPUTS_CLOUDFRONT_DISTRIBUTION_ID'
    secrets: inherit
  deploy-ui-components:
    needs: [lint-and-test,e2e-test,build]
    uses: ./.github/workflows/publish-static-bundle.yml
    with:
      stage: "staging"
      package-name: '@evervault/ui-components'
      preview-environment: 'staging'
      live-environment: 'ui-components-staging-deploy'
      run-preflight-checks: false
      perform-gated-preview-deployment: true
      s3-bucket-var-name: 'UI_COMPONENTS_S3_BUCKET'
      cloudfront-preview-path-invalidation: "/preview/index.html"
      cloudfront-live-path-invalidation: "/index.html,/assets/*"
      asset-subdomain: "ui-components"
      cloudfront-distribution-id: 'UI_COMPONENTS_CLOUDFRONT_DISTRIBUTION_ID'
    secrets: inherit
  deploy-3ds:
    needs: [lint-and-test,e2e-test,build]
    uses: ./.github/workflows/publish-static-bundle.yml
    with:
      stage: "staging"
      package-name: '@evervault/3ds'
      live-environment: 'staging'
      run-preflight-checks: false
      perform-gated-preview-deployment: false
      s3-bucket-var-name: 'TDS_AWS_S3_BUCKET'
      cloudfront-live-path-invalidation: "/index.html"
      cloudfront-distribution-id: 'TDS_AWS_CLOUDFRONT_DISTRIBUTION_ID'
    secrets: inherit
  create-tags:
    name: Create Tags
    runs-on: ubuntu-latest
    needs: [lint-and-test,e2e-test,build]
    outputs:
      has-changesets: ${{ steps.changesets.outputs.hasChangesets }}
      tags-to-publish: ${{ steps.create-tags.outputs.tags-to-publish }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          ssh-key: "${{ secrets.COMMIT_KEY }}"
      - name: Set up Git
        run: |-
          git config user.email "dependencies@evervault.com"
          git config user.name "Evervault Bot"
      - name: Get tags
        run: git fetch --tags origin
      - uses: pnpm/action-setup@v4
      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "pnpm"
      - name: Install Dependencies
        run: pnpm install --frozen-lockfile
      - name: Create Release Pull Request
        id: changesets
        uses: changesets/action@v1
        with:
          version: pnpm run version
          setupGitUser: false
        env:
          HUSKY: 0
          GITHUB_TOKEN: ${{ secrets.SDK_PUBLISH_TOKEN }}
      - name: Create Tags
        id: create-tags
        # Changesets deletes the changeset files on version PR, so if false then we need to tag and release the packages
        if: steps.changesets.outputs.hasChangesets == 'false'
        run: |-
          pnpm changeset tag && git push origin --tags
          TAGS=$(git tag --points-at=HEAD | jq -scR 'split("\n") | map(select(length > 0))')
          echo "tags-to-publish=$TAGS" >> $GITHUB_OUTPUT
        env:
          HUSKY: 0
  release:
    name: Release ${{ matrix.tag }}
    needs: [lint-and-test,e2e-test,build,create-tags]
    # Only attempt releases if we expect to have pushed some tags
    if: needs.create-tags.outputs.has-changesets == 'false'
    strategy:
      matrix:
        tag: ${{ fromJson(needs.create-tags.outputs.tags-to-publish) }}
    with:
      release-tag: ${{ matrix.tag }}
    secrets: inherit
    uses: ./.github/workflows/release.yml
