name: Deploy Inputs
on:
  workflow_call:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        type: string
      vite-evervault-js-url:
        description: "URL where the JS SDK should be loaded from"
        required: true
        type: string
      vite-keys-url:
        description: "URL where keys will be fetched from"
        required: true
        type: string
      vite-api-url:
        description: "API endpoint"
        required: true
        type: string
    secrets:
      aws-access-key-id:
        description: "AWS Access Key ID"
        required: true
      aws-secret-access-key:
        description: "AWS Secret Access Key"
        required: true
      aws-s3-bucket:
        description: "AWS S3 Bucket"
        required: true
      aws-cloudfront-distribution-id:
        description: "AWS Cloudfront Distribution ID"
        required: true
      tests_team_uuid:
        required: true
      tests_app_uuid:
        required: true
      tests_decrypt_fn_key:
        required: true
jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    env:
      EV_API_KEY: ${{ secrets.tests_decrypt_fn_key }}
      EV_APP_UUID: ${{ secrets.tests_app_uuid }}
      EV_DECRYPT_FN_KEY: ${{ secrets.tests_decrypt_fn_key }}
      EV_TEAM_UUID: ${{ secrets.tests_team_uuid }}
      VITE_GOOGLE_PAY_MERCHANT_ID: ${{ vars.GOOGLE_PAY_MERCHANT_ID }}
      VITE_EV_APP_UUID: ${{ secrets.tests_app_uuid }}
      VITE_EV_TEAM_UUID: ${{ secrets.tests_team_uuid }}
      VITE_TEST_COVERAGE: "true"
      VITE_API_URL: ${{ inputs.vite-api-url }}
      VITE_EVERVAULT_JS_URL: ${{ inputs.vite-evervault-js-url}}
      VITE_KEYS_URL: ${{ inputs.vite-keys-url }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Cache turbo build setup
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-inputs-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-inputs
      - uses: pnpm/action-setup@v4
      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "pnpm"
      - name: Install deps
        run: pnpm install --frozen-lockfile
      - name: Ensure all inputs dependecies are built
        run: pnpm turbo run build --fitler @evervault/inputs...
      - name: Formats check
        run: pnpm run format:check --fitler @evervault/inputs
      - name: Typescript check
        run: pnpm run typecheck --fitler @evervault/inputs
      - name: eslint check
        run: pnpm run lint --fitler @evervault/inputs
      - name: Install Playwright Browsers
        run: pnpm exec playwright install --with-deps
      - name: Unit test
        run: pnpm test --fitler @evervault/inputs
      - name: Coverage report
        run: pnpm coverage:report
      - name: Check test coverage
        run: pnpm coverage:check
      # We wipe and rebuild all assets to ensure that we dont upload any left over artifacts
      - name: Remove all built assets
        run: rm -rf packages/**/dist
      - name: Rebuild all packages with the correct variables
        run: pnpm turbo run build --fitler @evervault/inputs
      - name: Upload inputs build
        uses: actions/upload-artifact@v4
        with:
          name: inputs-build
          path: packages/inputs/dist
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    needs: [build-and-test]
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: "us-east-1"
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4.1.8
        with:
          name: inputs-sdk-build
          path: dist
      - name: S3 Deploy
        run: aws s3 cp ./dist s3://${{ secrets.aws-s3-bucket }}/v2/ --recursive
      - name: Cloudfront Cache Invalidation
        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.aws-cloudfront-distribution-id }} --paths "/v2/*"
