///
/// JHybridEvervaultSdkSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridEvervaultSdkSpec.hpp"

// Forward declaration of `AnyMap` to properly resolve imports.
namespace NitroModules { class AnyMap; }

#include <string>
#include <NitroModules/Promise.hpp>
#include <NitroModules/JPromise.hpp>
#include <NitroModules/AnyMap.hpp>
#include <NitroModules/JAnyMap.hpp>
#include <vector>

namespace margelo::nitro::evervault {

  jni::local_ref<JHybridEvervaultSdkSpec::jhybriddata> JHybridEvervaultSdkSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridEvervaultSdkSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridEvervaultSdkSpec::initHybrid),
    });
  }

  size_t JHybridEvervaultSdkSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  void JHybridEvervaultSdkSpec::dispose() noexcept {
    static const auto method = javaClassStatic()->getMethod<void()>("dispose");
    method(_javaPart);
  }

  // Properties
  

  // Methods
  std::string JHybridEvervaultSdkSpec::initialize(const std::string& teamId, const std::string& appId) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JString>(jni::alias_ref<jni::JString> /* teamId */, jni::alias_ref<jni::JString> /* appId */)>("initialize");
    auto __result = method(_javaPart, jni::make_jstring(teamId), jni::make_jstring(appId));
    return __result->toStdString();
  }
  std::shared_ptr<Promise<std::string>> JHybridEvervaultSdkSpec::encryptString(const std::string& instanceId, const std::string& data) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* instanceId */, jni::alias_ref<jni::JString> /* data */)>("encryptString");
    auto __result = method(_javaPart, jni::make_jstring(instanceId), jni::make_jstring(data));
    return [&]() {
      auto __promise = Promise<std::string>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<jni::JString>(__boxedResult);
        __promise->resolve(__result->toStdString());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<std::string>> JHybridEvervaultSdkSpec::encryptNumber(const std::string& instanceId, double data) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* instanceId */, double /* data */)>("encryptNumber");
    auto __result = method(_javaPart, jni::make_jstring(instanceId), data);
    return [&]() {
      auto __promise = Promise<std::string>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<jni::JString>(__boxedResult);
        __promise->resolve(__result->toStdString());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<std::string>> JHybridEvervaultSdkSpec::encryptBoolean(const std::string& instanceId, bool data) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* instanceId */, jboolean /* data */)>("encryptBoolean");
    auto __result = method(_javaPart, jni::make_jstring(instanceId), data);
    return [&]() {
      auto __promise = Promise<std::string>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<jni::JString>(__boxedResult);
        __promise->resolve(__result->toStdString());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<std::shared_ptr<AnyMap>>> JHybridEvervaultSdkSpec::encryptObject(const std::string& instanceId, const std::shared_ptr<AnyMap>& data) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* instanceId */, jni::alias_ref<JAnyMap::javaobject> /* data */)>("encryptObject");
    auto __result = method(_javaPart, jni::make_jstring(instanceId), JAnyMap::create(data));
    return [&]() {
      auto __promise = Promise<std::shared_ptr<AnyMap>>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<JAnyMap::javaobject>(__boxedResult);
        __promise->resolve(__result->cthis()->getMap());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<std::vector<std::shared_ptr<AnyMap>>>> JHybridEvervaultSdkSpec::encryptArray(const std::string& instanceId, const std::vector<std::shared_ptr<AnyMap>>& data) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* instanceId */, jni::alias_ref<jni::JArrayClass<JAnyMap::javaobject>> /* data */)>("encryptArray");
    auto __result = method(_javaPart, jni::make_jstring(instanceId), [&]() {
      size_t __size = data.size();
      jni::local_ref<jni::JArrayClass<JAnyMap::javaobject>> __array = jni::JArrayClass<JAnyMap::javaobject>::newArray(__size);
      for (size_t __i = 0; __i < __size; __i++) {
        const auto& __element = data[__i];
        __array->setElement(__i, *JAnyMap::create(__element));
      }
      return __array;
    }());
    return [&]() {
      auto __promise = Promise<std::vector<std::shared_ptr<AnyMap>>>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<jni::JArrayClass<JAnyMap::javaobject>>(__boxedResult);
        __promise->resolve([&]() {
          size_t __size = __result->size();
          std::vector<std::shared_ptr<AnyMap>> __vector;
          __vector.reserve(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            auto __element = __result->getElement(__i);
            __vector.push_back(__element->cthis()->getMap());
          }
          return __vector;
        }());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }

} // namespace margelo::nitro::evervault
