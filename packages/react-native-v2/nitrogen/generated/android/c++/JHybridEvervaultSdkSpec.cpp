///
/// JHybridEvervaultSdkSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridEvervaultSdkSpec.hpp"



#include <string>
#include <NitroModules/Promise.hpp>
#include <NitroModules/JPromise.hpp>

namespace margelo::nitro::evervault {

  jni::local_ref<JHybridEvervaultSdkSpec::jhybriddata> JHybridEvervaultSdkSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridEvervaultSdkSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridEvervaultSdkSpec::initHybrid),
    });
  }

  size_t JHybridEvervaultSdkSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  void JHybridEvervaultSdkSpec::dispose() noexcept {
    static const auto method = javaClassStatic()->getMethod<void()>("dispose");
    method(_javaPart);
  }

  // Properties
  

  // Methods
  std::string JHybridEvervaultSdkSpec::initialize(const std::string& teamId, const std::string& appId) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JString>(jni::alias_ref<jni::JString> /* teamId */, jni::alias_ref<jni::JString> /* appId */)>("initialize");
    auto __result = method(_javaPart, jni::make_jstring(teamId), jni::make_jstring(appId));
    return __result->toStdString();
  }
  std::shared_ptr<Promise<std::string>> JHybridEvervaultSdkSpec::encrypt(const std::string& instanceId, const std::string& json) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* instanceId */, jni::alias_ref<jni::JString> /* json */)>("encrypt");
    auto __result = method(_javaPart, jni::make_jstring(instanceId), jni::make_jstring(json));
    return [&]() {
      auto __promise = Promise<std::string>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<jni::JString>(__boxedResult);
        __promise->resolve(__result->toStdString());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }

} // namespace margelo::nitro::evervault
