///
/// HybridEvervaultSdkSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridEvervaultSdkSpec``
public protocol HybridEvervaultSdkSpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func initialize(teamId: String, appId: String) throws -> String
  func encryptString(instanceId: String, data: String) throws -> Promise<String>
  func encryptNumber(instanceId: String, data: Double) throws -> Promise<String>
  func encryptBoolean(instanceId: String, data: Bool) throws -> Promise<String>
  func encryptObject(instanceId: String, data: AnyMap) throws -> Promise<AnyMap>
  func encryptArray(instanceId: String, data: [AnyMap]) throws -> Promise<[AnyMap]>
}

/// See ``HybridEvervaultSdkSpec``
open class HybridEvervaultSdkSpec_base {
  private weak var cxxWrapper: HybridEvervaultSdkSpec_cxx? = nil
  public init() { }
  public func getCxxWrapper() -> HybridEvervaultSdkSpec_cxx {
  #if DEBUG
    guard self is HybridEvervaultSdkSpec else {
      fatalError("`self` is not a `HybridEvervaultSdkSpec`! Did you accidentally inherit from `HybridEvervaultSdkSpec_base` instead of `HybridEvervaultSdkSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridEvervaultSdkSpec_cxx(self as! HybridEvervaultSdkSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the EvervaultSdk HybridObject.
 * Implement this protocol to create Swift-based instances of EvervaultSdk.
 * ```swift
 * class HybridEvervaultSdk : HybridEvervaultSdkSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridEvervaultSdkSpec = HybridEvervaultSdkSpec_protocol & HybridEvervaultSdkSpec_base
