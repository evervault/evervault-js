///
/// HybridEvervaultSdkSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridEvervaultSdkSpec.hpp"

// Forward declaration of `HybridEvervaultSdkSpec_cxx` to properly resolve imports.
namespace NativeEvervault { class HybridEvervaultSdkSpec_cxx; }

// Forward declaration of `AnyMap` to properly resolve imports.
namespace NitroModules { class AnyMap; }

#include <string>
#include <NitroModules/Promise.hpp>
#include <NitroModules/AnyMap.hpp>
#include <vector>

#include "NativeEvervault-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::evervault {

  /**
   * The C++ part of HybridEvervaultSdkSpec_cxx.swift.
   *
   * HybridEvervaultSdkSpecSwift (C++) accesses HybridEvervaultSdkSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridEvervaultSdkSpec_cxx can directly inherit from the C++ class HybridEvervaultSdkSpec
   * to simplify the whole structure and memory management.
   */
  class HybridEvervaultSdkSpecSwift: public virtual HybridEvervaultSdkSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridEvervaultSdkSpecSwift(const NativeEvervault::HybridEvervaultSdkSpec_cxx& swiftPart):
      HybridObject(HybridEvervaultSdkSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NativeEvervault::HybridEvervaultSdkSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }
    void dispose() noexcept override {
      _swiftPart.dispose();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline std::string initialize(const std::string& teamId, const std::string& appId) override {
      auto __result = _swiftPart.initialize(teamId, appId);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::string>> encryptString(const std::string& instanceId, const std::string& data) override {
      auto __result = _swiftPart.encryptString(instanceId, data);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::string>> encryptNumber(const std::string& instanceId, double data) override {
      auto __result = _swiftPart.encryptNumber(instanceId, std::forward<decltype(data)>(data));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::string>> encryptBoolean(const std::string& instanceId, bool data) override {
      auto __result = _swiftPart.encryptBoolean(instanceId, std::forward<decltype(data)>(data));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::shared_ptr<AnyMap>>> encryptObject(const std::string& instanceId, const std::shared_ptr<AnyMap>& data) override {
      auto __result = _swiftPart.encryptObject(instanceId, data);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::vector<std::shared_ptr<AnyMap>>>> encryptArray(const std::string& instanceId, const std::vector<std::shared_ptr<AnyMap>>& data) override {
      auto __result = _swiftPart.encryptArray(instanceId, data);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }

  private:
    NativeEvervault::HybridEvervaultSdkSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::evervault
